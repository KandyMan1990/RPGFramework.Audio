using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace RPGFramework.Audio.Editor
{
    internal class AudioAssetProviderHelper<T> where T : ScriptableObject
    {
        private AudioAssetProviderModalWindow m_Window;
        private string                        m_AssetList;
        private SerializedObject              m_SerializedObject;

        internal void OpenModal(string assetType, string assetList, SerializedObject serializedObject)
        {
            m_AssetList        = assetList;
            m_SerializedObject = serializedObject;

            m_Window           =  ScriptableObject.CreateInstance<AudioAssetProviderModalWindow>();
            m_Window.OnConfirm += OnGenerateEnums;

            m_Window.Init(assetType);
        }

        private void OnGenerateEnums(string path, string filename, string namespaceForEnum)
        {
            m_Window.OnConfirm -= OnGenerateEnums;
            m_Window           =  null;

            SerializedProperty assets = m_SerializedObject.FindProperty(m_AssetList);
            string[]           enums  = new string[assets.arraySize];

            for (int i = 0; i < assets.arraySize; i++)
            {
                SerializedProperty element = assets.GetArrayElementAtIndex(i);
                T                  asset   = (T)element.objectReferenceValue;

                enums[i] = ToPascalCase(asset.name);
            }

            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string filePath = Path.Combine(path, filename);

            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }

            string file = BuildEnumFile(filename, namespaceForEnum, enums);

            File.WriteAllText(filePath, file);

            AssetDatabase.Refresh();
        }

        private static string ToPascalCase(string str)
        {
            StringBuilder sb = new StringBuilder(str.Length);

            string[] words = str.Split(' ');

            foreach (string word in words)
            {
                sb.Append(word[..1].ToUpper() + word[1..].ToLower());
            }

            return sb.ToString();
        }

        private static string BuildEnumFile(string filename, string namespaceForEnum, string[] enums)
        {
            StringBuilder sb           = new StringBuilder();
            string        enumFileName = filename.Split('.')[0];

            sb.AppendLine("// THIS FILE IS AUTOGENERATED, DO NOT MODIFY");
            sb.AppendLine($"// Last generated at {DateTime.UtcNow}\n");

            sb.AppendLine($"namespace {namespaceForEnum}");
            sb.AppendLine("{");

            sb.AppendLine($"\tpublic enum {enumFileName.Replace(" ", "")}");
            sb.AppendLine("\t{");

            for (int i = 0; i < enums.Length; i++)
            {
                string enumName = enums[i];
                sb.AppendLine($"\t\t{enumName} = {i},");
            }

            sb.AppendLine("\t}");

            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}