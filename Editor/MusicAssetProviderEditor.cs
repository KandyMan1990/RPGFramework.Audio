using System;
using System.IO;
using System.Text;
using RPGFramework.Audio.Music;
using UnityEditor;
using UnityEditor.UIElements;
using UnityEngine.UIElements;

namespace RPGFramework.Audio.Editor
{
    [CustomEditor(typeof(MusicAssetProvider))]
    public class MusicAssetProviderEditor : UnityEditor.Editor
    {
        public override VisualElement CreateInspectorGUI()
        {
            VisualElement root = new VisualElement();

            InspectorElement.FillDefaultInspector(root, serializedObject, this);

            Button button = new Button(OnButtonClicked)
                            {
                                    text = "Generate enum for Music Asset Provider"
                            };

            root.Add(button);

            return root;
        }

        private void OnButtonClicked()
        {
            MusicAssetProviderModalWindow.ShowWindow(OnGenerateEnums);
        }

        private void OnGenerateEnums(string path, string filename, string namespaceForEnum)
        {
            SerializedProperty musicAssets = serializedObject.FindProperty("m_MusicAssets");
            string[]           enums       = new string[musicAssets.arraySize];

            for (int i = 0; i < musicAssets.arraySize; i++)
            {
                SerializedProperty element    = musicAssets.GetArrayElementAtIndex(i);
                MusicAsset         musicAsset = (MusicAsset)element.objectReferenceValue;

                enums[i] = ToPascalCase(musicAsset.name);
            }

            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string filePath = Path.Combine(path, filename);

            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }

            string file = BuildEnumFile(filename, namespaceForEnum, enums);

            File.WriteAllText(filePath, file);

            AssetDatabase.Refresh();
        }

        private static string ToPascalCase(string str)
        {
            StringBuilder sb = new StringBuilder(str.Length);

            string[] words = str.Split(' ');

            foreach (string word in words)
            {
                sb.Append(word[..1].ToUpper() + word[1..].ToLower());
            }

            return sb.ToString();
        }

        private static string BuildEnumFile(string filename, string namespaceForEnum, string[] enums)
        {
            StringBuilder sb           = new StringBuilder();
            string        enumFileName = filename.Split('.')[0];

            sb.AppendLine("// THIS FILE IS AUTOGENERATED, DO NOT MODIFY");
            sb.AppendLine($"// Last generated at {DateTime.UtcNow}\n");

            sb.AppendLine($"namespace {namespaceForEnum}");
            sb.AppendLine("{");

            sb.AppendLine($"\tpublic enum {enumFileName.Replace(" ", "")}");
            sb.AppendLine("\t{");

            for (int i = 0; i < enums.Length; i++)
            {
                string enumName = enums[i];
                sb.AppendLine($"\t\t{enumName} = {i},");
            }

            sb.AppendLine("\t}");

            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}